/*
野指针就是指针指向的不是一个有效（合法）的地址
在程序中，如果访问野指针，可能会造成程序崩溃
出现野指针的情况主要有三种：
1.指针在定义的时候，如果没有进行初始化，它的值是不确定的
2.如果使用了动态分配的内存，内存被释放后，指针不会置空，但是指向的地址已经失效
3.指针指向的变量已超越变量的作用域（变量的内存空间已被系统收回）
    1）让指针指向了函数的局部变量
    2）函数的局部变量的地址作为返回值赋值给指针
规避方法：
1.指针在定义的时候，如果没有指向的地方，就初始化为nullptr
2.动态分配内存被释放后，将其置为nullptr
3.函数不要返回局部变量的地址
4.使用智能指针
野指针的危害比空指针要大很多，在程序中，如果访问野指针，可能会造成程序崩溃，也可能不崩溃，增加调试程序的难度
*/

#include<iostream>

int* func(){

    int a=3;
    std::cout<<"a="<<a<<",&a="<<&a<<std::endl;
    return &a;
}

int main(){
    
    //未初始化
    // int* p;
    // std::cout<<"p="<<p<<",*p="<<*p<<std::endl;

    // 动态内存释放后未置未nullptr
    // int* p=new int(3);
    // std::cout<<"p="<<p<<",*p="<<*p<<std::endl;

    // delete p;
    // std::cout<<"p="<<p<<",*p="<<*p<<std::endl;

    //函数局部变量的地址作为返回值赋值给指针
    int *p;
    p=func();
    std::cout<<"p="<<p<<",*p="<<*p<<std::endl;

    return 0;
}